#!/usr/bin/env python3
"""
API Test Script
Test the Flask API endpoints for the video generator
"""

import requests
import json
import time
import sys
from typing import Dict, Any

# API base URL
BASE_URL = "http://localhost:5000/api"

def test_health_check():
    """Test the health check endpoint."""
    print("🔍 Testing health check...")
    try:
        response = requests.get(f"{BASE_URL}/health")
        response.raise_for_status()
        data = response.json()
        print(f"✅ Health check passed: {data['status']}")
        return True
    except Exception as e:
        print(f"❌ Health check failed: {e}")
        return False

def test_get_videos():
    """Test getting all videos."""
    print("📚 Testing get videos...")
    try:
        response = requests.get(f"{BASE_URL}/videos")
        response.raise_for_status()
        data = response.json()
        print(f"✅ Get videos passed: Found {len(data['videos'])} videos")
        return data['videos']
    except Exception as e:
        print(f"❌ Get videos failed: {e}")
        return []

def test_create_video():
    """Test creating a new video."""
    print("🎬 Testing create video...")
    try:
        payload = {
            "title": "Test Video",
            "description": "A test video generated by the API test script",
            "user_input": "Create a simple test video about artificial intelligence"
        }
        
        response = requests.post(f"{BASE_URL}/videos", json=payload)
        response.raise_for_status()
        data = response.json()
        
        if data['success']:
            video_id = data['video']['id']
            print(f"✅ Create video passed: Video ID {video_id}")
            return video_id
        else:
            print(f"❌ Create video failed: {data.get('error', 'Unknown error')}")
            return None
            
    except Exception as e:
        print(f"❌ Create video failed: {e}")
        return None

def test_get_video(video_id: str):
    """Test getting a specific video."""
    print(f"📹 Testing get video {video_id}...")
    try:
        response = requests.get(f"{BASE_URL}/videos/{video_id}")
        response.raise_for_status()
        data = response.json()
        
        if data['success']:
            video = data['video']
            print(f"✅ Get video passed: {video['title']} - {video['status']}")
            return video
        else:
            print(f"❌ Get video failed: {data.get('error', 'Unknown error')}")
            return None
            
    except Exception as e:
        print(f"❌ Get video failed: {e}")
        return None

def test_get_progress(video_id: str):
    """Test getting video progress."""
    print(f"📊 Testing get progress for {video_id}...")
    try:
        response = requests.get(f"{BASE_URL}/videos/{video_id}/progress")
        response.raise_for_status()
        data = response.json()
        
        if data['success']:
            progress = data['progress']
            print(f"✅ Get progress passed: {len(progress)} progress entries")
            return progress
        else:
            print(f"❌ Get progress failed: {data.get('error', 'Unknown error')}")
            return []
            
    except Exception as e:
        print(f"❌ Get progress failed: {e}")
        return []

def test_sse_connection(video_id: str, timeout: int = 30):
    """Test Server-Sent Events connection."""
    print(f"🔄 Testing SSE connection for {video_id}...")
    try:
        import sseclient  # You might need to install this: pip install sseclient-py
        
        url = f"{BASE_URL}/videos/{video_id}/events"
        response = requests.get(url, stream=True, timeout=timeout)
        client = sseclient.SSEClient(response)
        
        event_count = 0
        for event in client.events():
            if event.data:
                try:
                    data = json.loads(event.data)
                    print(f"📡 SSE Event: {data['type']}")
                    event_count += 1
                    
                    if data['type'] == 'complete':
                        print("✅ SSE connection test completed")
                        return True
                    elif data['type'] == 'error':
                        print(f"❌ SSE error: {data['message']}")
                        return False
                    elif event_count > 10:  # Limit events for testing
                        print("✅ SSE connection test passed (limited)")
                        return True
                        
                except json.JSONDecodeError:
                    print(f"📡 SSE Raw data: {event.data}")
                    
    except ImportError:
        print("⚠️  SSE test skipped (sseclient-py not installed)")
        print("   Install with: pip install sseclient-py")
        return True
    except Exception as e:
        print(f"❌ SSE test failed: {e}")
        return False

def main():
    """Run all API tests."""
    print("🧪 Starting API Tests")
    print("=" * 50)
    
    # Test health check first
    if not test_health_check():
        print("❌ Health check failed. Make sure the API server is running.")
        sys.exit(1)
    
    print()
    
    # Test get videos
    existing_videos = test_get_videos()
    print()
    
    # Test create video
    video_id = test_create_video()
    if not video_id:
        print("❌ Cannot continue tests without creating a video")
        sys.exit(1)
    
    print()
    
    # Wait a bit for processing to start
    time.sleep(2)
    
    # Test get specific video
    video = test_get_video(video_id)
    print()
    
    # Test get progress
    progress = test_get_progress(video_id)
    print()
    
    # Test SSE connection (with timeout)
    test_sse_connection(video_id, timeout=10)
    
    print()
    print("=" * 50)
    print("🎉 API Tests Complete!")
    print(f"Created test video: {video_id}")
    print("Check the outputs/ directory for generated videos.")

if __name__ == "__main__":
    main() 